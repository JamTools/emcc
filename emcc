#!/usr/bin/env bash

#-----------------------------------------------------------------------#
# to be able to exit entire program from within function

trap "exit 1" TERM
export TOP_PID=$$

#-----------------------------------------------------------------------#
# prints script name, warns about changes, prompts for input to continue

startupWarning () {
  echo -e "\nEvolving Music Collection Cleanup (emcc):"
  echo -e "Directory: $rootPath\n"
  echo -e "This script moves, renames, edits files within this directory.\n"

  read -r -p "Continue with script? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    echo -e "OK. Running script..."
  else
    echo -e "OK. Exiting.\n"
    kill -s TERM $TOP_PID
  fi
}

#-----------------------------------------------------------------------#
# remove hidden directories as they likely contain unzip fragments

removeHiddenDirectories () {
  hidden=`find "$rootPath" -type d -regextype posix-egrep -iregex ".+/\..+$"`
  if [ "$hidden" != "" ]; then
    echo -e "Hidden directories:"
    IFS=$'\n'; hiddendirs=("$hidden"); unset IFS
    for d in "${hiddendirs[@]}"; do
      echo -e "$d"
    done
    echo ""

    read -r -p "Remove hidden directories? [y/N] " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      for d in "${hiddendirs[@]}"; do
        echo -e "Deleting: $d"
        rm -f -r "$d"
      done
    fi
  fi
}

#-----------------------------------------------------------------------#

findAndExtractArchives () {
  archs=`find "$rootPath" -type f  -regextype posix-egrep \
  -iregex ".+\.(zip|gz|7z|rar)$" | sort`

  if [ "$archs" != "" ]; then
    IFS=$'\n'; archArr=($archs); unset IFS
    for arch in "${archArr[@]}"; do
      aPPath=`echo "$arch" | grep -o ".*\/"`
      aName=`echo "$arch" | rev | sed -e "s/\/.\+//" | rev | \
      sed -e "s/\..\+$//"`

      echo -e "Extracting: $aName..."

      # find out if archive is X files (in which case create folder)
      fileCount=`7z l "$arch" | tail -1 | grep -o "[0-9]\+ files" | \
      grep -o "^[0-9]\+"`

      if [ "$fileCount" -gt "0" ]; then
        doExtract=`7z x -o"$aPPath$aName - -" "$arch" | tail -6`
      else
        doExtract=`7z x -o"$aPPath" "$arch" | tail -6`
      fi

      extractOk=`echo "$doExtract" | grep -o "Everything is Ok"`
      if [ "$extractOk" != "" ]; then rm -f "$arch"; fi
    done
  fi
}

#-----------------------------------------------------------------------#
# make sure required software is installed

checkPreReq () {
  valid="true"

  if [ "$(type 'ffprobe' 2> /dev/null)" = "" ]; then
    echo -e "\nError: please install 'ffprobe' part of 'ffmpeg'!"
    valid="false"
  fi

  if [ "$(type 'ffmpeg' 2> /dev/null)" = "" ]; then
    echo -e "\nError: please install 'ffmpeg'!"
    valid="false"
  fi

  if [ "$(type 'convert' 2> /dev/null)" = "" ]; then
    echo -e "\nError: 'convert' not found, please install 'imagemagick'!"
    valid="false"
  fi

  if [ "$(type '7z' 2> /dev/null)" = "" ]; then
    echo -e "\nError: please install '7z' part of 'p7zip-full'!"
    valid="false"
  fi

  if [ "$valid" != "true" ]; then
    echo -e "Exiting.\n"
    kill -s TERM $TOP_PID
  fi
}

#-----------------------------------------------------------------------#
# validates artist: can only contain certain characters

validArtist () {
  match=`echo "$1" | grep -o "[^A-Za-z0-9,' &]\+"`
  if [ "$match" = "" ]; then echo "$1"; fi
}

#-----------------------------------------------------------------------#
# images files recursively within folder

findImages () {
  find "$1" -type f -regextype posix-egrep \
  -iregex ".+\.(jpg|jpeg|png)$" | sort
}

#-----------------------------------------------------------------------#
# only audio files within a folder path (1 level at a time)

findAudio () {
  find "$1" -maxdepth 1 -type f  -regextype posix-egrep \
  -iregex ".+\.(mp3|flac|m4a|mp4|shn|wav)$" | sort
}

#-----------------------------------------------------------------------#
# album tag from audio file using ffprobe

id3Get () {
  ffprobe -loglevel error -show_entries format_tags="$1" \
  -of default=noprint_wrappers=1:nokey=1 "$2" 2>&1
}

#-----------------------------------------------------------------------#

getBitrate () {
  bitrate=`ffprobe -v error -show_entries format=bit_rate "$1" 2>&1 | \
  grep -o "bit_rate=[0-9]\+" | sed -e "s/bit_rate=//"`

  if [ "$bitrate" = "" ]; then
    echo "0"
  else
    echo "$bitrate"
  fi
}

#-----------------------------------------------------------------------#

getFileExt () {
  echo "$1" | grep -o "\.[A-Za-z0-9]\+$" | sed -e "s/^\.//" -e "s/./\U&/ig"
}

#-----------------------------------------------------------------------#
# date helpers

parseDayMon () {
  echo "$1" | grep -o "^[0-9]\{1,2\}" | sed 's/^0*//' | xargs printf %02d
}

nextDate () {
  echo "$1" | sed -r "s/^[0-9]{1,4}[/.-]{1}//"
}

#-----------------------------------------------------------------------#
# $1=year $2=mon $3=day

isValidDate () {
  day=`echo "$3" | grep -o "^[0-9]\+"`
  vd="date --date=$year-$mon-$day +%s"
  vd=`$vd 2>&1 | grep -o "invalid date"`
  if [ "$vd" = "" ]; then echo "$1.$2.$3"; fi
}

#-----------------------------------------------------------------------#

capitalizeStateCode () {
  codes="al ak as ar ca co ct de dc fl ga hi id il in ia ks ky la
  me md mh ma mi mn ms mo mt ne nv nh nj nm ny nc nd oh ok or pa ri sc
  sd tn tx ut vt va wa wv wi wy"

  # convert state code list into regexp match
  scR=`echo "\($codes\)" | sed -e ':a;N;$!ba;s/\n/ /g' \
  -e "s/\s\+/\\\\\\\|/ig"`

  echo "$1" | sed -e "s/, $scR\s/\U&/ig" -e "s/, $scR$/\U&/ig"
}

#-----------------------------------------------------------------------#
# match disc number in album
# $1 = album string; $2 = match(0) or replace(1)

matchDisc () {
  if [ "$2" = "" -o "$2" = "0" ]; then
    echo "$1" | grep -io "\(\s\|\/\)\+\(cd\|disc\)\s*[0-9]\+" | \
    grep -o "[0-9]\+$"
  elif [ "$2" = "1" ]; then
    echo "$1" | sed -e "s/\(\s\|\/\)\+\(cd\|disc\)\s*[0-9]\+//i" \
    -e "s/[^A-Za-z0-9\)]\+$//"
  fi
}

#-----------------------------------------------------------------------#
# uses ' @i' at the very end of the album tag

matchDiscInternal () {
  if [ "$2" = "" -o "$2" = "0" ]; then
    echo "$1" | grep -o "\s*\@[0-9]\+$" | sed -e "s/\s*\@//"
  elif [ "$2" = "1" ]; then
    echo "$1" | sed -e "s/\s*\@[0-9]\+$//"
  fi
}

#-----------------------------------------------------------------------#
# match roman numerals in album
# $1 = album string; $2 = match(0) or replace(1)
# have to parse discnumber as file sort order is reversed

matchRnSet () {
  if [ "$2" = "" -o "$2" = "0" ]; then
    rn=`echo "$1" | grep -o "^I*[IV]\+ " | sed -e "s/\s\+$//"`
    if [ "$rn" != "" ]; then
      case "$rn" in
      "I") echo "1" ;;
      "II") echo "2" ;;
      "III") echo "3" ;;
      "IV") echo "4" ;;
      "V") echo "5"
      esac
    fi
  elif [ "$2" = "1" ]; then
    echo "$1" | sed -e "s/^I*[IV]\+ //" -e "s/^[^A-Za-z]\+//"
  fi
}

#-----------------------------------------------------------------------#
# remove characters not allowed

replaceNA () {
  echo "$1" | sed -e "s/(\s*)//g" -e 's/\]//g' -e 's/\[//g' \
  -e 's/[\*\!\:\*\$\?\/\"\;\{\}]//g' -e "s/[^A-Za-z0-9 .,-&]\+/-/g" \
  -e 's/  / /g'
}

#-----------------------------------------------------------------------#
# remove junk from beginning & end

trimEnds () {
  echo "$1" | sed -e "s/^[^A-Z0-9]\+//i" -e "s/[^A-Z0-9\)]\+$//i"
}

#-----------------------------------------------------------------------#
# after artist has been removed
# $1 = album

formatAlbum () {
  # reset disc; replace @ before we use as disc number identifier
  disc=""; alb=`echo "$1" | sed -e 's/\@//g' -e 's/([0-9]\+)//g'`

  # match and remove any full date from album
  mD=`matchDate "$alb" | sed -e "s/|.\+//"`
  if [ "$mD" != "" ]; then alb="$mD"; fi

  # replace any character not allowed
  alb=`replaceNA "$alb"`; alb=`trimEnds "$alb"`

  # remove I, II, III, IV, V from beginning
  rn=`matchRnSet "$alb"`
  if [ "$rn" != "" ]; then disc=" @$rn"; alb=`matchRnSet "$alb" "1"`; fi

  # remove CD1, disc1, disc 1, cd 1
  dn=`matchDisc "$alb"`
  if [ "$dn" != "" ]; then disc=" @$dn"; alb=`matchDisc "$alb" "1"`; fi

  # replace ', Ny' with ', NY'
  alb=`capitalizeStateCode "$alb"`

  # replace duplicate - & duplicate spaces
  alb=`echo "$alb" | sed -e "s/-\s*-/-/g" -e "s/-\+/-/g" -e "s/\s\+/ /g"`

  # remove bitrate from end
  alb=`echo "$alb" | sed -e 's/\s\+\(128\|192\|256\|320\)$//'`
  alb=`trimEnds "$alb"`

  # remove file extension from end
  alb=`echo "$alb" | sed -e 's/\(mp3\|flac\|m4a\|mp4\|shn\|wav\)$//i'`
  alb=`trimEnds "$alb"`

  # remove SBD from end
  alb=`echo "$alb" | sed -e 's/sbd$//i'`; alb=`trimEnds "$alb"`
  
  echo "$alb$disc"
}

#-----------------------------------------------------------------------#
# $1=artist $2=path $3=matchAlbum $4=fileExt

updatePath () {
  if [ "$writeMode" = "1" ]; then
    mYear=`echo "$3" | grep -o "^[0-9]\{4\}"`
    newPath="$rootPath/$1/$mYear/$3"

    # add FLAC to path if that is file extension
    if [ "$4" = "FLAC" ]; then newPath="$newPath - FLAC"; fi

    if [ ! -d "$rootPath/$1/$mYear" ]; then
      mkdir "$rootPath/$1/$mYear"
    fi

    if [ -d "$newPath" ]; then
      x="1"; found="false"
      while [ "$found" = "false" ]; do
        if [ ! -d "$newPath ($x)" ]; then
          newPath="$newPath ($x)"
          found="true"
        fi
        x=$((x+1))
      done
    fi

    mv "$rootPath/$1/$2" "$newPath"

    # remove empty parent directories
    parentDir=`echo "$2" | grep -o ".*\/" | sed -e "s/\/$//"`
    while [ "$parentDir" != "" ]; do
      parentDirs=`find "$rootPath/$1/$parentDir" -type d | sort`
      IFS=$'\n'; parentDirs=($parentDirs); unset IFS

      if [ "${#parentDirs[@]}" -gt "1" ]; then
        parentDir=""
      else
        rm -f -r "$rootPath/$1/$parentDir"
        parentDir=`echo "$parentDir" | grep -o ".*\/" | sed -e "s/\/$//"`
      fi
    done
  fi
  echo "$newPath"
}

#-----------------------------------------------------------------------#
# conver & return smallest

convertArt () {
  if [ -f "$1/folder-c.jpg" ]; then rm -f "$1/folder-c.jpg"; fi

  # optimize folder.jpg to 500px @ 90% quality
  convert "$1/folder.jpg" -resize 500 -quality 90 "$1/folder-c.jpg"

  # if converted file size is smaller
  if [ $(stat -c%s "$1/folder-c.jpg") -lt $(stat -c%s "$1/folder.jpg") ]; then
    rm -f "$1/folder.jpg"; mv "$1/folder-c.jpg" "$1/folder.jpg"
  else
    rm -f "$1/folder-c.jpg"
  fi
}

#-----------------------------------------------------------------------#
# $1 = dir path, $2 = first audio file

handleArtwork () {
  coverArt=""

  # rename folder.jpg if it exists
  if [ -f "$1/folder.jpg" ]; then
    if [ -f "$1/folder-orig.jpg" ]; then rm -f "$1/folder-orig.jpg"; fi
    mv "$1/folder.jpg" "$1/folder-orig.jpg"
  fi

  # try: find embedded cover art
  ffmpeg -y -i "$2" "$1/folder.jpg" 2> /dev/null
  if [ -e "$1/folder.jpg" ]; then convertArt "$1"; fi

  if [ ! -e "$1/folder.jpg" ]; then
    # find recursive image files
    IFS=$'\n'; images=(`findImages "$1"`); unset IFS

    # try: find recursive cover art
    # named: folder, cover, image
    for i in "${images[@]}"; do
      imgName=`echo "$i" | rev | sed -e 's/\/.*$//' | rev`
      imgMatch=`echo "$imgName" | grep -io '\(folder\|cover\|image\)'`
      if [ "$imgMatch" != "" ]; then cp "$i" "$1/folder.jpg"; break; fi
    done

    if [ ! -e "$1/folder.jpg" ]; then
      # try: convert image with largest file size
      largestImg="0"
      for i in "${images[@]}"; do
        imgSize=`stat -c%s "$i"`
        if [ "$imgSize" -gt "$largestImg" ]; then
          cp "$i" "$1/folder.jpg"; largestImg="$imgSize"
        fi
      done
    fi

    if [ -e "$1/folder.jpg" ]; then convertArt "$1"; fi
  fi

  # echo if we found album art
  if [ -e "$1/folder.jpg" ]; then echo "$1/folder.jpg"; fi
}

#-----------------------------------------------------------------------#
# match title from filename

matchTitle () {
  newT="$1"; discTag=""

  # file pattern: 's01t01', 'd01t01' OR 's1 01' OR 'd301'
  p1=`echo "$newT" | grep -io '^\(s\|d\)[0-9]\{1,2\}[-t_\.\s]*[0-9]\+'`
  if [ "$p1" != "" ]; then
    newT=`echo "$newT" | sed 's/^\(s\|d\)//'`
    discTag=`echo "$newT" | grep -o "^[0-9]\+"`
    if [ "discTag" != "" ] && [ "${#discTag}" -gt "1" ]; then
      if [ "${#discTag}" -eq "3" ]; then
        discTag=`echo "$discTag" | grep -o "^[0-9]\{1\}"`
        newT=`echo "$newT" | sed -e "s/^[0-9]\{1\}//"`
      else
        discTag=`echo "$discTag" | grep -o "^[0-9]\{2\}"`
        newT=`echo "$newT" | sed -e "s/^[0-9]\{2\}//"`
      fi
    else
      newT=`echo "$newT" | sed -e "s/^[0-9]\{1\}//"`
    fi

    newT=`echo "$newT" | sed -e "s/^[-t_\.\s]*//i"`
    newT=`trimEnds "$newT"`
  fi

  # file pattern: nugs.net: sci160318d1_01_Shine.mp3, ph990710d1_01_Wilson.mp3
  if [ "$(echo $newT | grep -io '^[a-z]\+[0-9]\+d[0-9]\+[-_ ]')" != "" ]; then
    newT=`echo "$newT" | sed -e "s/^[a-z]\+[0-9]\+d//i"`
    discTag=`echo "$newT" | grep -o "^[0-9]\+"`
    newT=`echo "$newT" | sed -e "s/^[0-9]\+[-_ ]//"`
  fi

  # track from title tag
  trackTag=`echo "$newT" | grep -o "^[0-9]\+"`

  # remove track from filename & file extension
  newT=`echo "$newT" | sed -e "s/^[0-9_-\s]\+//" | rev | \
  sed -e "s/^[A-Z0-9]\+\.//i" | rev`

  # title: replace certain chars with space or nothing
  newT=`echo "$newT" | sed -e "s/[_-]/ /g" -e "s/\@//" -e 's/[^ ]*/\u&/g'`

  # remove all junk
  newT=`replaceNA "$newT"`; newT=`trimEnds "$newT"`

  echo -e "$newT|$trackTag|$discTag"
}

#-----------------------------------------------------------------------#
# $1=path $2=artist $3=album

updateTags () {
  IFS=$'\n'; files=(`findAudio "$rootPath/$2/$1"`); unset IFS

  coverArt=`handleArtwork "$rootPath/$2/$1" "${files[0]}"`
  if [ "$coverArt" != "" ]; then echo "Art: '$coverArt'"; fi

  i="0"; prevDisc="0"; prevTrack="0"
  for f in "${files[@]}"; do
    i=$((i+1))

    bitrate=`getBitrate "$f"`
    if [ "$bitrate" -eq "0" ]; then continue; fi

    # get embedded tags
    artistTag=`id3Get "artist" "$f"`
    if [ "$artistTag" = "" -o "$artistTag" = "<Unknown>" ]; then
      artistTag="$2"
    else
      # replace 'The' if matches similarily
      mThe=`echo "$2" | grep -io "\bthe"`
      if [ "$mThe" != "" ]; then
        cA=`echo "$2" | sed -e "s/^the //i" -e "s/, the$//i"`
        if [[ $artistTag == *"$cA"* ]]; then
          matchSpace=`echo "$cA" | grep -o "\s\+"`
          if [ "$matchSpace" != "" ]; then
            artistTag="$cA"
          else
            artistTag="$cA, The"
          fi
        fi
      fi
    fi

    # get filename by looking at path ( removing file extension )
    fN=`echo "$f" | rev | sed -e "s/\/.\+//" -e "s/^[a-z0-9]\+\.//i" | rev`
    IFS=$'\n'; fInfo=(`matchTitle "$fN" | sed -e "s/|/\n/g"`); unset IFS

    # 1) disc: try from tag
    discTag=`id3Get "disc" "$f" | grep -o "^[0-9]\+"`
    if [ "$discTag" = "" ]; then
      # disc: try from filename
      if [ "${fInfo[2]}" != "" ]; then discTag="${fInfo[2]}"; fi

      # disc: try from album tag
      if [ "$discTag" = "" ]; then
        aTag=`id3Get "album" "$f"`
        m1=`formatAlbum "$aTag"`
        if [ "$m1" != "" ]; then discTag=`matchDiscInternal "$m1"`; fi
      fi

      # disc: try from path
      if [ "$discTag" = "" ]; then
        m2=`formatAlbum "$1"`
        discTag=`matchDiscInternal "$m2"`
      fi

      # disc: try from last disc (on current album)
      if [ "$discTag" = "" ] && [ "$prevDisc" != "" ]; then
        discTag="$prevDisc"
      fi
    fi

    # format disc
    discTag=`echo "$discTag" | sed 's/^0*//'`

    # 2) track: try from tag
    trackTag=`id3Get "track" "$f" | grep -o "^[0-9]\+"`

    # track: try from filename
    if [ "$trackTag" = "" ] && [ "${fInfo[1]}" != "" ]; then
      trackTag="${fInfo[1]}"
    fi

    # track: default to index+1
    if [ "$trackTag" = "" ]; then trackTag="$i"; fi

    # format track
    trackTag=`echo "$trackTag" | sed 's/^0*//'`

    # if no disc number, keep incrementing trackTag
    if [ "$prevDisc" = "" ]; then
      if [ "$trackTag" -lt "$((prevTrack+1))" ]; then
        trackTag=$((prevTrack+1))
      fi
    fi

    # disc: save for next iteration
    prevTrack="$trackTag"
    if [ "$discTag" != "" ]; then prevDisc="$discTag"; fi

    # format track
    trackTag=`echo "$trackTag" | xargs printf %02d`

    # 3) title
    titleTag=`id3Get "title" "$f"`
    matchReadError=`echo "$titleTag" | grep -io "cannot read bom value, input too short"`
    if [ "$titleTag" != "" ] && [ "$matchReadError" = "" ]; then
      # send tag Title through matchTitle again to sanitize
      IFS=$'\n'; tInfo=(`matchTitle "$titleTag" | sed -e "s/|/\n/g"`); unset IFS
      titleTag="${tInfo[0]}"
    else
      titleTag="${fInfo[0]}"
    fi

    if [ "$writeMode" = "1" ]; then
      # actually update the tag
      writeAudio "$f" "$artistTag" "$3" "$titleTag" "$trackTag" \
      "$discTag" "$coverArt"
    fi

    echo "$discTag $trackTag - $titleTag - $3 - $artistTag"
  done
}

#-----------------------------------------------------------------------#
# $1=file $2=artist $3=album $4=title $5=track $6=disc $7=artwork

writeAudio () {
  parentPath=`echo "$1" | grep -o ".*\/"`

  # pull file extension from end of file path
  ext=`echo "$1" | grep -o "\.[A-Za-z0-9]\+$" | sed -e "s/^\.//" -e "s/./\L&/g"`

  # skip if on keep list, else convert
  skipKeep=`onKeepList "$parentPath"`
  if [ "$ext" = "mp3" -o "$skipKeep" != "" ]; then
    convert="-c:a copy"
  else
    echo -e "Converting: '$ext' to 'mp3'"
    ext="mp3"; convert="-codec:a libmp3lame"
    bitrate=`getBitrate "$1"`
    if [ "$bitR" -eq "320" ] && [ "$bitrate" -gt "320000" ]; then
      convert="$convert -b:a 320k"
    else
      convert="$convert -qscale:a 0"
    fi
  fi

  file="$parentpath"
  # add disc to filename (if exists)
  if [ "$6" != "" ]; then file="$file$6-"; fi
  file=`trimEnds "$file$5 - $4"`; file="/tmp/$file.$ext"

  # remove tmp file if exists
  if [ -f "$file" ]; then rm -f "$file"; fi

  # use id3v2 if not FLAC/OGG
  ffmpegArgs=""
  noID3=`echo "$ext" | grep -io '\(flac\|ogg\)'`
  if [ "$noID3" = "" ]; then ffmpegArgs="-id3v2_version 4"; fi

  # determine if artwork is also input
  if [ "$7" != "" ] && [ "$noID3" = "" ]; then
    ffmpeg -i "$1" -i "$7" -map 0:a $convert -metadata artist="$2" \
    -metadata album_artist="$2" -metadata album="$3" -metadata title="$4" \
    -metadata track="$5" -metadata disc="$6" -map 1:v -c:v copy \
    -metadata:s:v title="Album cover" -metadata:s:v comment="Cover (Front)" \
    $ffmpegArgs "$file" 2>/dev/null
  else
    ffmpeg -i "$1" -map 0:a $convert -metadata artist="$2" \
    -metadata album_artist="$2" -metadata album="$3" -metadata title="$4" \
    -metadata track="$5" -metadata disc="$6" $ffmpegArgs "$file" 2>/dev/null
  fi

  # if artwork and flac
  if [ "$7" != "" ] && [ "$noID3" != "" ]; then
    metaflac --import-picture-from="$7" "$file"
  fi

  if [ -f "$file" ]; then
    # check for filesize (else means errors)
    fileSize=`stat -c%s "$file"`
    if [ "$fileSize" -gt "0" ]; then
      # remove the original; copy the new in place
      rm -f "$1"; mv "$file" "$parentPath/"
    fi
  fi
}

#-----------------------------------------------------------------------#
# album is a full path - work from end of path to root
# make sure we have enough chars; avoid returning only 'CD1' or 'Disc1'

albumFromPath () {
  if [ "$(echo $1 | grep -o '\/')" != "" ]; then
    last=`echo "$1" | rev | sed -e 's/\/.*$//' | rev`
    if [ "${#last}" -lt "10" ]; then
      last2=`echo "$1" | sed -e "s/\/$last$//" | rev | \
      sed -e 's/\/.*$//' | rev | sed -e 's/^[0-9]\+\s\+//'`
      # combine parent and grandparent directories into album name
      echo "$last2 $last"
    else
      echo "$last" # album is just parent directory name
    fi
  else
    echo "$1" # pass back what was passed in
  fi
}

#-----------------------------------------------------------------------#
# $1 = string to match
# $2 = prepend ie ^ (start of string)
# $3 = append ie $ (end of string)

matchDate () {
  # match: 2000.01.01 2000/1/1 2000-1-01
  # also match: 2000.01.01-03, 2000.01.01,03
  m0="[-,]\{0,1\}[0-9]\{0,2\}"

  match="$2[0-9]\{4\}[/.-]\{1\}[0-9]\{1,2\}[/.-]\{1\}[0-9]\{1,2\}$m0$m0$3"
  m1=`echo "$1" | grep -o "$match"`
  if [ "$m1" != "" ]; then
    year=`echo "$m1" | grep -o "^[0-9]\{4\}"`; m1=`nextDate "$m1"`
    mon=`parseDayMon "$m1"`; m1=`nextDate "$m1"`
    day=`echo "$m1" | grep -o "^[0-9]\{1,2\}$m0$m0" | sed -e "s/[^0-9]\+$//"`
    if [ "${#day}" -eq "1" ]; then day="0$day"; fi
  fi

  # match: 01.01.2000 1/1/2000 1-01-2000
  if [ "$m1" = "" ]; then
    match="$2[0-9]\{1,2\}[/.-]\{1\}[0-9]\{1,2\}[/.-]\{1\}[0-9]\{4\}$3"
    m1=`echo "$1" | grep -o "$match"`
    if [ "$m1" != "" ]; then
      mon=`parseDayMon "$m1"`; m1=`nextDate "$m1"`
      day=`parseDayMon "$m1"`; m1=`nextDate "$m1"`
      year=`echo "$m1" | grep -o "^[0-9]\{4\}"`
    fi
  fi

  # match: 03-30-69 06.09.73 and 98-08-23
  if [ "$m1" = "" ]; then
    match="$2[0-9]\{1,2\}[/.-]\{1\}[0-9]\{1,2\}[/.-]\{1\}[0-9]\{2\}$3"
    m1=`echo "$1" | grep -o "$match"`
    if [ "$m1" != "" ]; then
      # match special case: 06-12/31 == year-mon/day
      special=`echo "$m1" | grep -o "[0-9]\+-[0-9]\+\/[0-9]\+"`

      x1=`parseDayMon "$m1"`; m1=`nextDate "$m1"`
      x2=`parseDayMon "$m1"`; m1=`nextDate "$m1"`
      x3=`parseDayMon "$m1"`

      if [ "$x1" -gt "12" -o "$special" != "" ]; then
        # not month, must start with year
        year="$x1"; mon="$x2"; day="$x3"
      else
        mon="$x1"; day="$x2"; year="$x3"
      fi

      if [ "$year" -gt "50" ]; then
        year="19$year"
      else
        year="20$year"
      fi
    fi
  fi

  # validate date
  if [ "$m1" != "" ]; then
    vd=`isValidDate $year $mon $day`
    if [ "$vd" != "" ]; then
      album=`echo "$1" | sed -e "s/$match//g"`
      # replace the instance of 'year.mon.day year'
      album=`trimEnds "$album" | sed -e "s/^[0-9]\{4\}\(\s\|\s-\s\)//"`
      if [ "$album" = "" ]; then album='@'; fi
      echo -e "$album|$year|$mon|$day"
    fi
  fi
}

#-----------------------------------------------------------------------#
# $1 = album tag
# $2 = just parent directory of path

matchStudioAlbum () {
  # try album tag
  m1=`echo "$1" | grep -o "^[0-9]\{4\}\s\+"`

  # try folder name
  if [ "$m1" = "" ]; then
    m2="$2"; m1=`echo "$2" | grep -o "^[0-9]\{4\}\s\+"`
  else
    m2="$1"
  fi

  if [ "$m1" != "" ]; then
    # remainder becomes album name
    alb=`echo "$m2" | sed -e 's/^[0-9]\+\s\+//g'`

    # to avoid too many mistaken matches from folder name:
    # folder name & album tag have to be somewhat similar
    if [[ $2 == *"$1"* ]]; then
      m1=`echo "$m1" | grep -o "[0-9]\+"`
      echo -e "$alb|$m1"
    fi
  fi
}

#-----------------------------------------------------------------------#
# $1=artist $2=path $3=dirName $4=albumTag
# if date matched, can update folder/tags

matchDateInAlbum () {
  # match: live album: with parent path
  m1=`matchDate "$3" "^"`

  # match: live album: with album tag
  if [ "$m1" = "" ]; then m1=`matchDate "$4"`; fi

  # match: live album: with full path
  if [ "$m1" = "" ]; then m1=`matchDate "$1/$2"`; fi

  # match: studio album: starts with YEAR then space
  if [ "$m1" = "" ]; then
    m1=`matchStudioAlbum "$4" "$3"`
  fi

  # split info from $m1 data
  if [ "$m1" != "" ]; then
    IFS=$'\n'; dates=(`echo "$m1" | sed -e "s/|/\n/g"`); unset IFS

    alb=`albumFromPath "${dates[0]}"`

    # replace any character not allowed
    alb=`replaceNA "$alb"`; alb=`trimEnds "$alb"`

    # replace ^$artist from within $alb
    alb=`echo "$alb" | sed -e "s/^$1//ig"`; alb=`trimEnds "$alb"`

    # if $alb is blank, look to album tag, split before first -
    if [ "$alb" = "" ]; then
      splitMatch=`echo "$4" | grep -o '.\+ -'`
      if [ "$splitMatch" != "" ]; then
        alb=`echo "$splitMatch" | sed -e "s/ -$//"`
      else
        alb="$4"
      fi
    fi

    # remove case when also starts with 'year' or 'year -'
    alb=`echo "$alb" | sed -e "s/^[0-9]\{4\}\(\s\|\s-\s\)//"`

    # format the album
    alb=`formatAlbum "$alb"`

    if [ "${dates[2]}" = "" ]; then
      # only have YEAR
      alb="${dates[1]} $alb"
    else
      # return in YEAR-MON-DAY format
      alb="${dates[1]}.${dates[2]}.${dates[3]} $alb"
    fi

    alb=`trimEnds "$alb"`; echo "$alb"
  fi
}

#-----------------------------------------------------------------------#
# process sub-folders containing audio files
# $1 = $artist
# $2 = path w/o artist

processDirectory () {
  IFS=$'\n'; files=(`findAudio "$rootPath/$1/$2"`); unset IFS
  if [ "${#files[@]}" -gt "0" ]; then
    dirName=`echo "$2" | rev | sed -e "s/\/.\+//" | rev`

    # get embedded album tag from LAST audio file
    count="${#files[@]}"
    lastFile=$((count-1))
    albumTag=`id3Get "album" "${files[$lastFile]}"`

    matchAlbum=`matchDateInAlbum "$1" "$2" "$dirName" "$albumTag"`
    if [ "$matchAlbum" != "" ]; then
      echo -e "\n${#files[@]} files: in '$2'"

      # replace discnumber ie ' @1'
      matchAlbum=`matchDiscInternal "$matchAlbum" "1"`

      # add audio file .ext to path if bitrate >320
      ext=`getFileExt "${files[0]}"`

      # check album tag
      if [ "$albumTag" != "$matchAlbum" ]; then
        updateTags "$2" "$1" "$matchAlbum"
      fi

      # check folder name
      mYear=`echo "$matchAlbum" | grep -o "^[0-9]\{4\}"`
      matchFolder=`echo "$2" | sed -e "s/ ([0-9]\+)$//" -e "s/ - $ext$//"`
      if [ "$mYear/$matchAlbum" != "$matchFolder" ]; then
        echo -e "path: update to: '$mYear/$matchAlbum'"
        newPath=`updatePath "$1" "$2" "$matchAlbum" "$ext"`
      else
        newPath="$2"
      fi

      # add to processed list
      echo "$rootPath/$1/$newPath" >> "$rootPath/.emcc-processed"
    else
      echo -e "\nunknown: '$1/$2'"
    fi
  fi
}

#-----------------------------------------------------------------------#
# do not convert high bitrate audio files to mp3 if match path

onKeepList () {
  if [ -f "$rootPath/.emcc-keep" ]; then
    IFS=$'\n'; kPaths=(`cat "$rootPath/.emcc-keep"`); unset IFS
    found=""
    for keep in "${kPaths[@]}"; do
      if [[ $1 == *"$keep"* ]]; then found="$1"; break; fi
    done
    if [ "$found" != "" ]; then echo "$found"; fi
  fi
}

#-----------------------------------------------------------------------#
# process root directory
# sets: $artist for each top level directory
# calls: processDirectory() for each $artist sub-directory

processIndex () {
  if [ ! -f "$rootPath/.emcc-processed" ]; then
    touch "$rootPath/.emcc-processed"
  else
    sort "$rootPath/.emcc-processed" > "$rootPath/.emcc-processed-new"
    mv "$rootPath/.emcc-processed-new" "$rootPath/.emcc-processed"
  fi

  # exists in 'current', but not in 'processed'
  newPaths=`comm -13 "$rootPath/.emcc-processed" "$rootPath/.emcc-current"`
  IFS=$'\n'; paths=($newPaths); unset IFS

  for p in "${paths[@]}"; do
    # trim $rootPath from path
    p=`echo "$p" | sed -r "s/^.{${#rootPath}}\///"`

    # skip $rootPath and $unknown directory
    if [ "$p" = "$unknown" -o "$p" = "$rootPath" ]; then continue; fi

    # check for subdirectory
    if [ "$(echo $p | grep -o '.\+/.\+')" = "" ]; then
      artist=`validArtist "$p"`
      if [ "$artist" != "" ]; then
        echo -e "\nArtist: $artist"
      else
        echo -e "\nunknown: '$p'"
      fi
    else
      # make sure directory path still exists
      if [ -d "$rootPath/$p" ]; then
        # trim artist/ from path
        p=`echo "$p" | sed -r "s/^.{${#artist}}\///"`
        processDirectory "$artist" "$p"
      fi
    fi
  done
}

#-----------------------------------------------------------------------#
# main

if [ $# -eq 0 ]; then
  echo -e "\nUsage: emcc [path] [mode] [bitrate]\n"; exit 1
fi

if [ ! -d "$1" ]; then
  echo -e "\nError: '$1' not a directory\n"; exit 1
fi

rootPath="$1"

# set mode
writeMode="$2"
if [ "$writeMode" = "" ]; then writeMode="0"; fi

# target bitrate
bitR="$3"
if [ "$bitR" != "320" ]; then bitR="V0"; fi

checkPreReq
startupWarning
if [ "$writeMode" = "1" ]; then
  removeHiddenDirectories
  findAndExtractArchives
fi

paths=`find "$rootPath" -type d | sort`
echo "$paths" > "$rootPath/.emcc-current"

IFS=$'\n'; paths=("$paths"); unset IFS
processIndex

echo -e "\nemcc finished. Exiting.\n"
